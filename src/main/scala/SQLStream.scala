import org.apache.spark.SparkConf
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming._
import org.apache.spark.util.IntParam
import org.apache.spark.{ SparkConf, SparkContext }
import org.apache.spark.sql.SQLContext
/**
 * the streaming input as this way
 * id,lat,longt,text
 */

object SQLStream extends App {

  StreamingExamples.setStreamingLogLevels()

  val sparkConf = new SparkConf().setAppName("SimpleSQL")
  val ssc = new StreamingContext(sparkConf, Seconds(1))

  // Create a socket stream on target ip:port and count the
  // words in input stream of \n delimited text (eg. generated by 'nc')
  // Note that no duplication in storage level only for running locally.
  // Replication necessary in distributed scenario for fault tolerance.

  val data = ssc.socketTextStream("localhost", "9999".toInt, StorageLevel.MEMORY_ONLY)

  val sc = new SparkContext(sparkConf)
  val sqlContext = new SQLContext(sc)
  //val sqlContext = new org.apache.spark.sql.SQLContext(sc)
  // createSchemaRDD is used to implicitly convert an RDD to a SchemaRDD.
  import sqlContext.createSchemaRDD

  // Define the schema using a case class.
  // Note: Case classes in Scala 2.10 can support only up to 22 fields. To work around this limit, 
  // you can use custom classes that implement the Product interface.
  case class Twitte(name: String, lat: Long, long: Long, text: String)
  //people.registerAsTable("people")
  //val t2=1
   
  val dstream=data.window(Seconds(1),  Seconds(1))
  
  dstream.print();
 
  // val count=dstream.count;
  //printf("number tuples "+count);
  
  // Create an RDD of Person objects and register it as a table.
  dstream.foreachRDD(rdd => {
    
    if (rdd.count > 0) 
    {
      
      val twitts = rdd.map(_.split(",")).map(p => 
        Twitte(p(0),p(1).trim.toLong, p(2).trim.toLong, p(3)))
   
     /* for(item <- twitts.collect().toArray) 
      {
        println("i "+item.toString());
      }*/
        
       twitts.registerTempTable("tw")
       //twitts.printSchema
      //println("number of tuples: " + twitts.collect().length)
      //SQL statements can be run by using the sql methods provided by sqlContext.
      val teenagers = sqlContext.sql("SELECT name FROM tw WHERE lat >= 0 AND long <= 10 AND text like '%error%' OR text like '%warn%'")
      
      val user=teenagers.collect.map(row=> row.getString(0))
      
      println("name: "+user.mkString(","));
      
       //teenagers.map(t => "Name: " + t(0)).collect().foreach(println)
      
    }
  })
  // wordCounts.print()
  ssc.start()
  ssc.awaitTermination()

}